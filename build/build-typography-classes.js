/**
 * Generate Typography Classes from Typography Tokens
 */

const fs = require("fs");
const path = require("path");
const typographyTokens = require("@washingtonpost/typography-tokens/dist/tokens.json");
const {
  typeface: typefaceTokens,
  families: typefaceFamilyTokens,
  "line-height": typefaceLineHeightTokens,
  size: typefaceSizeTokens,
  weight: typefaceWeightTokens
} = typographyTokens.typography;

const generationNote = "/* Autogenerated by build-typography-classes.js*/";

/**
 * Generate font-families.css
 */

const typefaceFamiliesClasses = Object.keys(typefaceFamilyTokens).map(
  token => {
    const familiesLineHeight = {
      headline: typefaceLineHeightTokens.sm.value,
      "magazine-headline": typefaceLineHeightTokens.sm.value,
      subhead: typefaceLineHeightTokens.md.value,
      "meta-text": typefaceLineHeightTokens.md.value,
      body: typefaceLineHeightTokens.default.value
    };

    if (token === "sans-serif") {
      return `.font-sans-serif {
      font-family: ${typefaceFamilyTokens[token].value};
    }`;
    } else {
      return `.font--${token} {
        font-family: ${typefaceFamilyTokens[token].value};
        ${
          familiesLineHeight[token]
            ? `line-height: ${familiesLineHeight[token]};`
            : ""
        }
      }`;
    }
  }
);

fs.writeFile(
  path.resolve(__dirname, "./../src/css/typography/font-family.css"),
  `
  ${generationNote}
  @import "./font-face.css";

  .font--article-body {
    font-family: ${typefaceFamilyTokens.body.value};
    line-height: ${typefaceLineHeightTokens.lg2.value};
  }

  ${typefaceFamiliesClasses.join("")}
  `,
  () => true
);

/**
 * Generate weight.css
 */
const typefaceWeightClasses = Object.keys(typefaceWeightTokens).map(token => {
  if (token === "regular") return;
  return `.font-${token}, .${token} {
      font-weight: ${typefaceWeightTokens[token].value};
    }`;
});

fs.writeFile(
  path.resolve(__dirname, "./../src/css/typography/font-weight.css"),
  `
  ${generationNote}
  ${typefaceWeightClasses.join("")}
  `,
  () => true
);

/**
 * Generate line-height.css
 */
const typefaceLineHeightClasses = Object.keys(typefaceLineHeightTokens).map(
  token => {
    return `.lh-${token === "lg" ? "lg, .lh3" : token} {
      line-height: ${typefaceLineHeightTokens[token].value};
    }`;
  }
);

fs.writeFile(
  path.resolve(__dirname, "./../src/css/typography/line-height.css"),
  `
  ${generationNote}
  ${typefaceLineHeightClasses.join("")}
  `,
  () => true
);

/**
 * Generate font-size.css
 */
const typefaceSizeNsClasses = [];
const typefaceSizeLClasses = [];

const typefaceSizeClasses = Object.keys(typefaceSizeTokens).map(token => {
  // Generate -ns classes
  if (["xxxs", "xxs", "xs"].includes(token)) {
    typefaceSizeNsClasses.push(`.font-${token}-ns {
      font-size: ${typefaceSizeTokens[token].value};
    }`);
  }
  // Generate -l classes
  if (["md", "xxxs"].includes(token)) {
    typefaceSizeLClasses.push(`.font-${token}-l {
      font-size: ${typefaceSizeTokens[token].value};
    }`);
  }

  return `.font-${token} {
      font-size: ${typefaceSizeTokens[token].value};
    }`;
});

typefaceSizeLClasses.push(
  `.font-copy { font-size: ${typefaceSizeTokens.sm.value}; }`
);

fs.writeFile(
  path.resolve(__dirname, "./../src/css/typography/font-size.css"),
  `
  ${generationNote}

  ${typefaceSizeClasses.join("")}

  /* tablet and up breakpoint */
  @media only screen and (min-width: 768px) {
    ${typefaceSizeNsClasses.join("")}
  }

  /* tablet breakpoint */
  @media only screen and (min-width: 768px) and (max-width: 1023px) {
    .font-copy { font-size: ${typefaceSizeTokens.sm.value}; }
  }
  /* desktop breakpoint */
  @media only screen and (min-width: 1024px) {
    ${typefaceSizeLClasses.join("")}
  }

  /* mobile breakpoint */
  @media only screen and (max-width: 767px) {
    .font-sm-md3 {
      font-size: var(--font-size-medium-variant-three);
    }
    .font-xxs-s {
      font-size: var(--font-size-xxs);
    }
  }
  `,
  () => true
);
