const fs =require ("fs");
const path  =require ("path").resolve;
const reactDocs  =require('react-docgen');
const resolver=reactDocs.resolver.findAllComponentDefinitions;
// The React components to load
const components  =require ("./paths.js");

// Where the JSON file ends up
const componentJsonPath = "../../dist/component-data.json";
const componentDataArray = [];
const generationNote = {"note":"Autogenerated by doc-gen.js"};
componentDataArray.push(generationNote);

CrawlPaths();

function createComponentFile() {
  try {
    fs.mkdir(path(__dirname,'../../dist'),(err,data)=>{
      const componentJsonArray = JSON.stringify(componentDataArray, null, 2);
      fs.writeFile(path(__dirname,componentJsonPath), componentJsonArray, "utf8", (err, data) => {
        console.log("Created component file");
      });
    })
  } catch (error) {
    throw error;
  }
}
/**
 * Use React-Docgen to parse the loaded component
 * into JS object of props, comments
 *
 * @param {File} component
 * @param {String} filename
 */
async function parseComponent(component, filename) {
  const componentInfo = await reactDocs.parse(component,resolver);
  const splitFromPath = filename.split("src/")[1];
  const shortName = splitFromPath.split('/')[0];
  componentInfo.filename = shortName;
  componentDataArray.push(componentInfo);
}

/**
 * Loads a component file, then runs parsing callback
 * @param {String} file
 */
async function loadComponent(file) {
  try {
    const data= fs.readFileSync(file,'utf8');
    parseComponent(data, file);
  } catch (error) {
    console.log(error);
  }
}
/**
 * Crawls every path in doc-gen-paths
 */
async function CrawlPaths() {
  for(let i=0;i<components.length;i++){
    await loadComponent(path(components[i]));
  }

  createComponentFile();
}