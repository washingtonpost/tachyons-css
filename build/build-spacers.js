/* eslint-disable max-lines-per-function */
/* eslint-disable no-unused-vars */
/**
 * Build Spacer Tachyons
 */
const fs = require("fs");
const path = require("path");

const {
  size: { spacing: tokens }
} = require("@washingtonpost/spacing-tokens/dist/tokens.json");

/**
 * Generate Shadow Classes from Shadow Tokens
 */
function createClasses() {
  const classNames = [];

  const spacing = ["m", "p"];
  const variants = ["a", "t", "r", "b", "l"];
  const responsiveVariants = ["", "ns", "m", "l"];

  const spacingNames = {
    m: "margin",
    p: "padding"
  };

  const variantNames = {
    a: "auto",
    t: "top",
    r: "right",
    b: "bottom",
    l: "left"
  };

  const breakpoints = {
    "": {
      start: "",
      end: ""
    },
    ns: {
      start: "@media only screen and (min-width: 768px) {",
      end: "}"
    },
    m: {
      start:
        "@media only screen and (min-width: 768px) and (max-width: 1023px) {",
      end: "}"
    },
    l: {
      start: "@media only screen and (min-width: 1024px) {",
      end: "}"
    }
  };

  Object.keys(tokens).forEach((boop, index) => {
    const { name, attributes, value } = tokens[boop];
    const pixelValue = value === "auto" ? value : `${value}px`;
    const isAutoValue = value === "auto";

    // positive spacers
    spacing.forEach(type => {
      variants.forEach(variant => {
        responsiveVariants.forEach(responsiveVariant => {
          classNames.push(`
${breakpoints[responsiveVariant].start}
  .${type}${variant}-${attributes.item}${
            responsiveVariant === "" ? "" : `-${responsiveVariant}`
          } {
    ${spacingNames[type]}${
            variant === "a" ? "" : `-${variantNames[variant]}`
          }: ${pixelValue};
  }
${breakpoints[responsiveVariant].end}
          `);
        });
      });
    });

    if (isAutoValue === false) {
      // negative spacers
      spacing.forEach(type => {
        variants.forEach(variant => {
          responsiveVariants.forEach(responsiveVariant => {
            classNames.push(`
${breakpoints[responsiveVariant].start}
  .-${type}${variant}-${attributes.item}${
              responsiveVariant === "" ? "" : `-${responsiveVariant}`
            } {
    ${spacingNames[type]}${
              variant === "a" ? "" : `-${variantNames[variant]}`
            }: calc(-1 * ${pixelValue});
  }
${breakpoints[responsiveVariant].end}
          `);
          });
        });
      });
    }
  });

  fs.writeFile(
    path.resolve(__dirname, "./../src/spacers/spacers.css"),
    `/* Autogenerated by css/build/build-spacers.js */${classNames.join("\n\r\n")}`,
    () => true
  );
}

createClasses();
